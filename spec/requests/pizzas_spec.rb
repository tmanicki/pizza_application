require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/pizzas", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Pizza. As you add validations to Pizza, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {pName: "Pepporni Pizza"}
  }

  let(:valid_topping_attributes) {
    {name: "Pepporni"}
  }

  let(:invalid_attributes) {
    {pName: "N0pe"}
  }

  let(:blank_attributes) {
    {pName: ""}
  }
  

  describe "GET /index" do
    it "renders a successful response" do
      user = FactoryBot.create(:admin, title:"2", email: "chef@pizza.com")
      sign_in user
      Pizza.create! valid_attributes
      get pizzas_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      pizza = Pizza.create! valid_attributes
      get pizza_url(pizza)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_pizza_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      pizza = Pizza.create! valid_attributes
      get edit_pizza_url(pizza)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Pizza" do
        expect {
          post pizzas_url, params: { pizza: valid_attributes }
        }.to change(Pizza, :count).by(1)
      end

      it "redirects to the created pizza" do
        post pizzas_url, params: { pizza: valid_attributes }
        expect(response).to redirect_to(pizza_url(Pizza.last))
      end
    end

    context "with valid parameters and topping" do
      it "creates a new Pizza" do
        Topping.create! valid_topping_attributes
        expect {
          post pizzas_url, params: { pizza: valid_attributes, pizza_topping: valid_topping_attributes }
        }.to change(Pizza, :count).by(1)
      end

      it "redirects to the created pizza" do
        post pizzas_url, params: { pizza: valid_attributes }
        expect(response).to redirect_to(pizza_url(Pizza.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Pizza" do
        expect {
          post pizzas_url, params: { pizza: invalid_attributes }
        }.to change(Pizza, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post pizzas_url, params: { pizza: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end

    context "with invalid blank parameters" do
      it "does not create a new Pizza" do
        expect {
          post pizzas_url, params: { pizza: blank_attributes }
        }.to change(Pizza, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post pizzas_url, params: { pizza: blank_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {pName: "THE Pizza"}
      }

      it "updates the requested pizza" do
        pizza = Pizza.create! valid_attributes
        patch pizza_url(pizza), params: { pizza: new_attributes }
        pizza.reload
      end

      it "redirects to the pizza" do
        pizza = Pizza.create! valid_attributes
        patch pizza_url(pizza), params: { pizza: new_attributes }
        pizza.reload
        expect(response).to redirect_to(pizza_url(pizza))
      end
    end

    context "with valid parameters and toppings" do
      let(:new_attributes) {
        {pName: "THE Pizza"}
      }

      it "updates the requested pizza" do
        pizza = Pizza.create! valid_attributes
        patch pizza_url(pizza), params: { pizza: new_attributes }
        pizza.reload
      end

      it "redirects to the pizza" do
        Topping.create! valid_topping_attributes
        pizza = Pizza.create! valid_attributes
        patch pizza_url(pizza), params: { pizza: new_attributes, pizza_topping: valid_topping_attributes }
        pizza.reload
        expect(response).to redirect_to(pizza_url(pizza))
      end
    end

    context "with invalid parameters" do
  
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        pizza = Pizza.create! valid_attributes
        patch pizza_url(pizza), params: { pizza: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

      context "with invalid blank parameters" do
    
        it "renders a response with 422 status (i.e. to display the 'edit' template)" do
          pizza = Pizza.create! valid_attributes
          patch pizza_url(pizza), params: { pizza: blank_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested pizza" do
      pizza = Pizza.create! valid_attributes
      expect {
        delete pizza_url(pizza)
      }.to change(Pizza, :count).by(-1)
    end

    it "redirects to the pizzas list" do
      pizza = Pizza.create! valid_attributes
      delete pizza_url(pizza)
      expect(response).to redirect_to(pizzas_url)
    end
  end
end
